#ifndef STATE_H
#define STATE_H

#include <QStack>
#include "block.h"
#include "ui_mainwindow.h"

// State
// A state is defined by their stacks, which contain Blocks.
// If a state has the same Stack configuration as another, they are considered equal.
class State
{
    public:
        State();
        // A state
        State(QStack<Block> l1, QStack<Block> l2, QStack<Block> l3);

        // A block placeholder that can act as the robotic arm
        Block arm;

        // Points to the parent state
        State *parent = NULL;

        // String that descibes how a state was yielded (what move / action)
        QString stateYieldedBy;

        // String that is generated by the stack structure of this state and serves as an ID
        QString stateID;

        // Member variables
        QStack<Block> l1;  // Stack for location 1
        QStack<Block> l2;  // Stack for location 2
        QStack<Block> l3;  // Stack for location 3

        // Compares this state with another state. They are
        // Equal when all of their stacks are equal.
        bool equals(State otherState);

        // Prints the current state representation to the console
        void toString();

        // Sets L1 to a new value
        void setL1(QStack<Block> stack);

        // Sets L2 to a new value
        void setL2(QStack<Block> stack);

        // Sets L3 to a new value
        void setL3(QStack<Block> stack);

        //GSets L1 to a new value
        QStack<Block> getL1();

        // Gets L2 to a new value
        QStack<Block> getL2();

        // Gets L3 to a new value
        QStack<Block> getL3();

        // Assign CLEAR relations
        void assignClear();

        // Assign ON relations
        void assignOn();

        // Assign TABLE relations
        void assignTable();

        // From the current state, returns the unvisited child states that can be achieved via one action
        QList<State *> calculateChildStates();

        void updateRelations();

        // Sets the string ID for the state
        void setID();

        // Moves from one stack location to another and yields a new state
        State * move(int source, int destination);


};


#endif // STATE_H
